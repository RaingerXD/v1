import re
from asyncio import sleep
from pyrogram import Client, filters
from Ubotlibs.Ubot.database.filterdb import *
from pyrogram.types import Message
from Ubot.modules.basic import add_command_help
from Ubotlibs.Ubot.database.accesdb import *
from Ubot import cmds
from Ubotlibs.Ubot import *


@Ubot("filter", cmds)
@check_access
async def save_filters(client, message):
    msg = message.reply_to_message
    user_id = message.from_user.id
    if len(message.command) < 2 or not message.reply_to_message:
        return await message.reply(
            "`Silakan balas ke pesan dengan format !filter nama_filter`"
        )
    if not message.reply_to_message.text and not message.reply_to_message.sticker:
        return await message.reply(
            "`Anda hanya dapat menyimpan teks atau stiker`"
        )
    name = message.text.split(None, 1)[1].strip()
    if not name:
        return await message.reply("`Gunakan format !filter nama_filter`")
    chat_id = message.chat.id
    _type = "text" if message.reply_to_message.text else "sticker"
    _filter = {
        "type": _type,
        "data": message.reply_to_message.text.markdown
        if _type == "text"
        else message.reply_to_message.sticker.file_id,
    }
    anu = await msg.forward(client.me.id)
    msg_id = anu.id
    await client.send_message(client.me.id,
    f"#FILTER\nKEYWORD: {name}"
        "\n\nPesan berikut disimpan sebagai data balasan filter untuk obrolan, mohon jangan dihapus !!",
    )
    await sleep(1)
    await save_filter(chat_id, user_id, name, _filter)
    await message.reply(f"`Berhasil menyimpan filter dengan nama** `{name}`")


@Ubot("filters", cmds)
@check_access
async def get_filterss(_, message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    _filters = await get_filters_names(chat_id, user_id)
    if not _filters:
        return await message.reply("**Tidak ada filter dalam obrolan ini.**")
    _filters.sort()
    msg = f"**Daftar filter di {message.chat.title}** :\n"
    for _filter in _filters:
        msg += f"**-** `{_filter}`\n"
    await message.reply(msg)


@Ubot("stop", cmds)
@check_access
async def del_filter(_, message):
    user_id = message.from_user.id
    if len(message.command) < 2:
        return await message.reply("`Gunakan format !stop nama_filter`")
    name = message.text.split(None, 1)[1].strip()
    if not name:
        return await message.reply("`Gunakan format !stop nama_filter`")
    chat_id = message.chat.id
    deleted = await delete_filter(chat_id, user_id, name)
    if deleted:
        await message.reply(f"**Filter {name} dihapus.**")
    else:
        await message.reply("**Tidak ada filter dengan nama {name}.**")


@Client.on_message(
    filters.text & filters.incoming & filters.group & ~filters.private & filters.me,
    group=3,
)
@check_access
async def filters_re(_, message):
    text = message.text.lower().strip()
    if not text:
        return
    user_id = message.from_user.id
    chat_id = message.chat.id
    list_of_filters = await get_filters_names(chat_id, user_id)
    for word in list_of_filters:
        pattern = r"( |^|[^\w])" + re.escape(word) + r"( |$|[^\w])"
        if re.search(pattern, text, flags=re.IGNORECASE):
            _filter = await get_filter(chat_id, user_id, word)
            data_type = _filter["type"]
            data = _filter["data"]
            if data_type == "text":
                keyb = None
                if message.reply_to_message:
                    await message.reply_to_message.reply_text(
                        data,
                        disable_web_page_preview=True,
                    )

                    if text.startswith("~"):
                        await message.delete()
                    return

                return await message.reply(
                    data,
                    disable_web_page_preview=True,
                )
            if message.reply_to_message:
                await message.reply_to_message.reply_sticker(data)

                if text.startswith("~"):
                    await message.delete()
                return
            return await message.reply_sticker(data)
